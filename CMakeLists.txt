CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(ANTAGONIZ)

IF(WIN32)
    SET(ANTAGONIZ_WINDOWS 1)
    SET(PLATFORM_DEPENDENCIES ${WIN32_DEPENDENCIES})
    ADD_DEFINITIONS(-D ANTAGONIZ_WINDOWS)
    MESSAGE(STATUS "Platform detected : Windows")
ELSEIF(UNIX)
    SET(ANTAGONIZ_UNIX 1)
    SET(PLATFORM_DEPENDENCIES ${UNIX_DEPENDENCIES})
    ADD_DEFINITIONS(-D ANTAGONIZ_UNIX)
    MESSAGE(STATUS "Platform detected : Unix")
ELSEIF(APPLE)
    SET(ANTAGONIZ_APPLE 1)
    SET(PLATFORM_DEPENDENCIES ${APPLE_DEPENDENCIES})
    ADD_DEFINITIONS(-D ANTAGONIZ_APPLE)
    MESSAGE(STATUS "Platform detected : Apple")
ELSE()
    SET(PLATFORM_NOT_SUPORTED 0)
    SET(PLATFORM_DEPENDENCIES)
    ADD_DEFINITIONS(-D PLATFORM_NOT_SUPORTED)
    MESSAGE(FATAL_ERROR "This platform is currently not supported.")
ENDIF()

# Settings
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/Bin)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_SOURCE_DIR}/Bin)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/Bin)
SET(ANTAGONIZ_BIN_DIR_REL ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
SET(ANTAGONIZ_BIN_DIR_DBG ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
SET(ANTAGONIZ_BIN_DIR_RELDBG ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
SET(ThirdParty ${CMAKE_SOURCE_DIR}/ThirdParty)

# lib Extern 
LINK_DIRECTORIES(${ThirdParty}/glew/lib/Release/x64)
LINK_DIRECTORIES(${ThirdParty}/glfw/lib)
LINK_DIRECTORIES(${ThirdParty}/openal-soft/lib)
LINK_DIRECTORIES(${ThirdParty}/hv/lib/Release)
INCLUDE_DIRECTORIES(${ThirdParty})

# ThirdParty
ADD_SUBDIRECTORY(ThirdParty)	
SET(BUILD_FRAMEWORK 1)

IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    SET(ANTAGONIZ_USE_GCC 1)
    ADD_DEFINITIONS(-DANTAGONIZ_USE_GCC)
    MESSAGE(STATUS "Detected Compiler: GCC")

    IF(WIN32)
        SET(COMPILER_DEPENDENCIES ${MINGW_DEPENDENCIES} -lpsapi)
    ELSE()
        SET(COMPILER_DEPENDENCIES ${GCC_DEPENDENCIES})
    ENDIF()

    SET(CXX_RELEASE_FLAGS "-Wall -O3 -march=native -ffast-math -flto -fno-plt -fno-exceptions -fno-rtti")
    SET(CXX_RELWITHDEBINFO_FLAGS "-Wall -O3 -march=native -ffast-math -flto -fno-plt -fno-exceptions -fno-rtti")
    SET(CXX_DEBUG_FLAGS "-Wall -Wextra -g -Og -Wno-attributes -Wshadow -Wdouble-promotion")
ELSEIF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    SET(ANTAGONIZ_USE_CLANG 1)
    ADD_DEFINITIONS(-DANTAGONIZ_USE_CLANG)
    MESSAGE(STATUS "Detected Compiler: Clang")
    SET(COMPILER_DEPENDENCIES ${CLANG_DEPENDENCIES})
    SET(CXX_RELEASE_FLAGS "-Wall -O3 -march=native -ffast-math -flto -fno-rtti -fno-exceptions")
    SET(CXX_RELWITHDEBINFO_FLAGS "-Wall -O3 -march=native -ffast-math -flto -fno-rtti -fno-exceptions")
    SET(CXX_DEBUG_FLAGS "-Wall -Wextra -g -Og -Wno-attributes -Wshadow -Wunreachable-code")
ELSEIF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    SET(ANTAGONIZ_USE_MSVC 1)
    ADD_DEFINITIONS(-DANTAGONIZ_USE_MSVC)
    SET(COMPILER_DEPENDENCIES ${MVSC_DEPENDENCIES})
    MESSAGE(STATUS "Detected Compiler: MSVC")

    SET(CXX_RELEASE_FLAGS "/O2 /GL /DNDEBUG /arch:AVX2")
    SET(CXX_RELWITHDEBINFO_FLAGS "/W3 /Zi /O2 /Ob1 /DNDEBUG /MT")
    SET(CXX_DEBUG_FLAGS "/W3 /Zi /Od /RTC1 /MTd")
ELSE()
    SET(COMPILER_DEPENDENCIES)
    MESSAGE(FATAL_ERROR "Compiler detected: Unknown. Please use GCC, Clang, or MSVC.")
ENDIF()

if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    add_definitions(-DANTAGONIZ_DEBUG)
    set(ANTAGONIZ_BIN_OUTPUT ${ANTAGONIZ_BIN_DIR_DBG})
    message(STATUS "Compilation mode  : Debug")
    set(CMAKE_CXX_FLAGS_DEBUG "${CXX_DEBUG_FLAGS}" CACHE STRING "Debug flags" FORCE)

elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
    add_definitions(-DANTAGONIZ_RELEASE)
    set(ANTAGONIZ_BIN_OUTPUT ${ANTAGONIZ_BIN_DIR_REL})
    message(STATUS "Compilation mode  : Release")
    set(CMAKE_CXX_FLAGS_RELEASE "${CXX_RELEASE_FLAGS}" CACHE STRING "Release flags" FORCE)

elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
    add_definitions(-DANTAGONIZ_RELEASE_DBG)
    set(ANTAGONIZ_BIN_OUTPUT ${ANTAGONIZ_BIN_DIR_RELDBG})
    message(STATUS "Compilation mode  : Release with Debug Info")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CXX_RELWITHDEBINFO_FLAGS}" CACHE STRING "RelWithDebInfo flags" FORCE)

else()
    message(WARNING "Unknown build type '${CMAKE_BUILD_TYPE}', defaulting to Debug")
    add_definitions(-DANTAGONIZ_DEBUG)
    set(ANTAGONIZ_BIN_OUTPUT ${ANTAGONIZ_BIN_DIR_DBG})
    set(CMAKE_CXX_FLAGS_DEBUG "${CXX_DEBUG_FLAGS}" CACHE STRING "Debug flags" FORCE)
endif()

MESSAGE(STATUS "Project binary  output : ${ANTAGONIZ_BIN_OUTPUT}")

ADD_SUBDIRECTORY(ANTAGONIZ)